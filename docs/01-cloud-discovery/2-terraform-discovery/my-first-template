=================================
Activity 1-2: Terraform Discovery
=================================

------------------A REVOIR---------
In this activity you will:

- Clone lab's github repository
- Create AWS environment variables
- Create an SSH key-pair
- Create the Terraform variables
- Initialize the AWS Terraform provider
- Deploy the lab infrastucture plan
- Confirm firewall bootstrap completion
------------------A REVOIR---------





Open Terminal
-------------

.. figure:: work-in-progress.png




Create terraform Environment :
------------------------------
On your POD Machine, create a directory work space with Terminal :

.. code-block:: bash

     $ mkdir ~/UTD
    $ mkdir ~/UTD/first-step-terraform



Clone the lab software repository
---------------------------------
you will need to clone the GitHub repository used in this lab.  This repository (or *repo*) contains
the files needed to deploy the network and compute infrastructure we'll be working with.

.. code-block:: bash

    $ cd ~/UTD/first-step-terraform/
    $ git clone https://github.com/PaloAltoNetworks/terraform-templates/tree/master/sample




Create AWS environment variables
--------------------------------
We will be deploying the lab infrastucture in AWS using Terraform.  A
predefined Terraform plan is provided that will initialize the AWS provider and
call modules responsible for instantiating the network, compute, and storage
resources needed.

In order for Terraform to do this it will need to authenticate to AWS using the
AWS Access Key and Secret Key values of your IAM account for API access ( see the doc `here <https://utd-automation.readthedocs.io/en/latest/00-getting-started/aws-account.html>`_. ).
Rather than write these as Terraform variables, we will use Linux environment variables.

Create the environment variables.

.. code-block:: bash

    $ export AWS_ACCESS_KEY_ID="your-access-key-here"
    $ export AWS_SECRET_ACCESS_KEY="your-secret-key-here"


Create an SSH key-pair
----------------------
All AWS EC2 instances are required to have an SSH key-pair defined when the
instance is created.  This is done to ensure secure access to the instance will
be available once it is created.

Create an SSH key-pair with an empty passphrase and save them in the ``~/.ssh``
directory.

.. code-block:: bash

    $ ssh-keygen -t rsa -b 1024 -N '' -f ~/.ssh/lab_ssh_key


Create S3 Bucket for bootstrapping
----------------------------------
Bootstrapping is a feature of the VM-Series firewall that allows you to load a pre-
defined configuration into the firewall during boot-up and to automate its deployment.
This ensures that the firewall is configured and ready at initial boot-up, removing the
need for manual configuration.

To create a bootstrap bucket, Sign in to the AWS console https://www.amazon.com
and click on S3

.. figure:: work-in-progress.png

Click Create Bucket:

.. figure:: work-in-progress.png

Enter a bucket name and select a region and click Create as there is no need to go
through the subsequent steps as the default values will be used.

.. figure:: work-in-progress.png




Bootstrap Bucket have to be created in same region of VPC


Bucket Properties/Permissions???

You will need to enter a globally unique bucket name. AWS will warn you if the
name is not unique. Once the bucket is created, click on the newly created bucket
and add four folders called **config**, **license**, **software** and **content** by clicking on
Create Folder:

.. figure:: work-in-progress.png

Fill in the folder name and click Save. Repeat the process for the three remaining
folders.


.. figure:: work-in-progress.png

Now let â€™s proceed to download the boot strap files from Git Hub.
Upload files the various buckets from the following link: https://github.com/PaloAltoNetworks/aws/tree/master/two-tier-sample/bootstrap


.. figure:: work-in-progress.png

Upload the bootstrap.xml and init-cfg.txt files to the config folder.

.. figure:: work-in-progress.png

Select Add Files and select the two files (bootstrap.xml and init-cft.txt) downloaded
previously and click Upload:

.. figure:: work-in-progress.png

The two files should be listed under the folder:

.. figure:: work-in-progress.png

Upload the **panupv2-all-contents-8225-5857** file to the **content** folder.
click on the **content** folder ins the S3 console and click Upload. Select **Add Files**
and select the file (panupv2-all-contents-8225-5857) downloaded previously and click
**Upload**:

.. figure:: work-in-progress.png

Once complet ed the file is listed under the folder content :

.. figure:: work-in-progress.png



Optional for Bootstrap: 
If need upgrade automaticaly your VM after boot, you can Upload a PANOS image file to the **software** folder.
click on the **software** folder ins the S3 console and click Upload. Select Add Files
and select the file (example : PanOS_vm_9.0.1 ) retrieved from PANW support site, and click
**Upload**:

.. figure:: work-in-progress.png



Optional for Bootstrap: 
If need associate licenses (BYOL) automaticaly your FW VM after boot, you can Upload a Licenses file to the **license** folder.
click on the **license** folder ins the S3 console and click Upload. Select Add Files
and select the file (example : 0001A100110-threats.key) downloaded previously and click
Upload:

.. figure:: work-in-progress.png



Create the Terraform variables
------------------------------
Change into the AWS deployment directory.

.. code-block:: bash

    $ cd ~/UTD/utd-automation/utd/sample

In this directory you will find the three main files associated with a
Terraform plan: ``main.tf``, ``variables.tf``, and ``outputs.tf``.  View the
contents of these files to see what they contain and how they're structured.

.. code-block:: bash

    $ more deploy_panvm.tf
    $ more deploy_vpc.tf
    $ more variables.tf


deploy_pavm.tf - Terraform template for Palo Alto Networks VM-Series
firewall.

deploy_vpc.tf - Terraform template for create a VPC on AWS. The VPC will
create the management, trust, and untrust subnets for the VM-Series firewall.
An internet gateway needed for the internet connection and AWS endpoint
(currently disabled. need to uncomment the code to enable the feature) to
allow the firewall to access the S3 bucket via private IP address.

variables.tf - Variables you can set for the deployment


Modify/Adapt Configuration
--------------------------

you need to modify the variables.tf file with a Terminal or text editor.


To set the AWS access key and secret key of your IAM account for API access ( see the doc `here <https://utd-automation.readthedocs.io/en/latest/00-getting-started/aws-account.html>`_. ):

# AWS Credential
variable "access_key" {
decscription = "AWS Access Key"
default = "XXXX"
}
variable "secret_key" {
description = "AWS Secret Key"
default = " XXXX "
}

Modify Region and AZ if needed:(The template is also setup to deploy in US East Region)

# AWS Region and Availablility Zone
variable "region" {
default = "us-east-1"
}
variable "availability_zone" {
default = "us-east-1e"
}



Modify variables.tf with a Terminal or text editor with right information regarding SSH keypair:

variable "pavm_key_name" {
description = "Name of the SSH keypair to use in AWS."
default = "panw-mlue"
}
variable "pavm_key_path" {
description = "Path to the private portion of the SSH key specified."
default = "keys/panw-mlue.pem"
}



you need to modify the deploy_panw.tf file with a Terminal or text editor.

In deploy_panw.tf you can adapt the AMI information regarding your licensing
type (BYOL or Bundle2):

# Palo Alto VM-Series Firewall
resource "aws_instance" "pavm" {
#ami = "${lookup(var.pavm_byol_ami_id, var.region)}"
ami = "${lookup(var.pavm_payg_bun2_ami_id, var.region)}"
availability_zone = "${var.availability_zone}"
tenancy = "default"
ebs_optimized = false
disable_api_termination = false
instance_initiated_shutdown_behavior = "stop"
instance_type = "${var.pavm_instance_type}"
key_name = "${var.pavm_key_name}"
monitoring = false
vpc_security_group_ids = [ "${aws_security_group.default-security-gp.id}" ]
subnet_id = "${aws_subnet.mgmt-subnet.id}"
associate_public_ip_address = "${var.pavm_public_ip}"
private_ip = "${var.pavm_mgmt_private_ip}"
source_dest_check = false
tags = {
Name = "PAVM"
}


you need to modify the deploy_vpc.tf file with a Terminal or text editor.

In deploy_vpc.tf you have to uncomment code to use Bootstrap S3 Bucket and give the S3 name bucket:
# Create an endpoint for S3 bucket
/* Uncomment to enable */
resource "aws_vpc_endpoint" "private-s3" {
vpc_id = "${aws_vpc.pavm-vpc.id}"
service_name = "com.amazonaws.us-east-1.s3"
/* Uncomment to enable policy
policy = <<POLICY
{
"Statement": [{
"Effect": "Deny",
"Principal": "*",
"Action": "s3:*",
"Resource": "arn:aws:s3:::ha1-dev-paloalto/*"
}
]
}
POLICY
*/



Initialize the AWS Terraform provider
-------------------------------------
Once you've created the ``terraform.tfvars`` file and populated it with the
variables and values you are now ready to initialize the Terraform providers.
For this initial deployment we will only be using the
`AWS Provider <https://www.terraform.io/docs/providers/aws/index.html>`_.
This initialization process will download all the software, modules, and
plugins needed for working in a particular environment.

.. code-block:: bash

    $ terraform init



Deploy the lab infrastucture plan
---------------------------------
We are now ready to deploy our lab infrastructure plan.  We should first
perform a dry-run of the deployment process and validate the contents of the
plan files and module dependencies.

.. code-block:: bash

    $ terraform plan

If there are no errors and the plan output looks good, let's go ahead and
perform the deployment.

.. code-block:: bash

    $ terraform apply -auto-approve

At a high level these are each of the steps this plan will perform:






---------- A MODIFIER--------------------------------
#. Run the ``bootstrap`` module
    #. Create an S3 bucket for the firewall bootstrap package
    #. Assign an IAM policy to the bucket allowing read access from the
       firewall instance
    #. Create the ``/config/init-cfg.txt``, ``/config/bootstrap.xml``,
       ``/software``, ``/content``, and ``/license`` objects in the bootstrap
       bucket
#. Run the ``vpc`` module
    #. Create the VPC
    #. Create the Internet gateway
    #. Create the ``management``, ``untrust``, ``web``, and ``database``
       subnets
    #. Create the security groups for each subnet
    #. Create the default route for the ``web`` and ``database`` subnets
#. Run the ``firewall`` module
    #. Create the VM-Series firewall instance
    #. Create the VM-Series firewall interfaces
    #. Create the Elastic IPs for the ``management`` and ``untrust`` interfaces
    #. Create an IAM instance profile for accessing the bootstrap bucket
#. Run the ``web`` module
    #. Create the web server instance
    #. Create the web server interface
#. Run the ``database`` module
    #. Create the database server instance
    #. Create the database server interface
---------- A MODIFIER--------------------------------



The deployment process should finish in a few minutes and you will be presented
with the public IP addresses of the VM-Series firewall management and untrust
interfaces.  However, the VM-Series firewall can take up to *ten minutes* to
complete the initial bootstrap process.

It is recommended that you skip ahead and read the :doc:`../03-run/terraform/background-terraform` section while you wait.


Verify on AWS Console some elements created by terraform
--------------------------------------------------------

.. figure:: work-in-progress.png



Confirm firewall bootstrap completion
-------------------------------------
SSH into the firewall with the following credentials.

- **Username:** ``admin``
- **Password:** ``Ignite2019!``

.. code-block:: bash

    $ ssh admin@<FIREWALL_MGMT_IP>

Replace ``<FIREWALL_MGMT_IP>`` with the IP address of the firewall management
interface that was provided in the Terraform plan results.  This information
can be easily recalled using the ``terraform output`` command within the
deployment directory.

.. warning:: If you are unsuccessful the firewall instance is likely still
   bootstrapping or performing an autocommit.  Hit ``Ctrl-C`` and try again
   after waiting a few minutes.  The bootstrap process can take up to *ten
   minutes* to complete before you are able to successfully log in.

Once you have logged into the firewall you can check to ensure the management
plane has completed its initialization.

.. code-block:: bash

    admin@lab-fw> show chassis-ready

If the response is ``yes``, you are ready to proceed with the configuration
activities.

.. note:: While it is a security best practice to use SSH keys to authenticate
          to VM instances in the cloud, we have defined a static password for
          the firewall's admin account in this lab (specifically, in the 
          bootstrap package).  This is because the PAN-OS XML API cannot utilize SSH keys and requires a
          username/password or API key for authentication.



Destroy the lab infrastucture plan:
-----------------------------------
To clean up the deployment, just run the following command

.. code-block:: bash

$ terraform destroy

it will automatically delete every object that was created by the template.